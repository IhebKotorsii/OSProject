#include <stdio.h>
#include "request.h"
#include "io_helper.h"
#include <pthread.h>

char default_root[] = ".";
//
// ./wserver [-d <basedir>] [-p <portnum>] 
// 
int main(int argc, char *argv[]) {
    int c;
    char *root_dir = default_root;
    int port = 10000;
    nThreads= DEFAULT_THREADS;
    bufferMax=DEFAULT_BUFFER_TAILLE;
    
    while ((c = getopt(argc, argv, "d:p:t:b:")) != -1)
	switch (c) {
	case 'd':
	    root_dir = optarg;
	    break;
	case 'p':
	    port = atoi(optarg);
	    break;
	case 't':
		    nThreads = atoi(optarg);
		    break;
	case 'b':
		    bufferMax = atoi(optarg);
			    break;
	default:
	    fprintf(stderr, "usage: wserver [-d basedir] [-p port] [-t nThreads] [-b bufferMax] \n");
	    exit(1);
	}

    // run out of this directory
    chdir_or_die(root_dir);

    // now, get to work
    pthread_t thread_pool[nThreads];
    	for(int i=0; i<nThreads; i++)
        	pthread_create(&thread_pool[i], NULL, thread_request_serve_static, NULL);
    	bufferTaille = 0;
    int listen_fd = open_listen_fd_or_die(port);
    while (1) {
	struct sockaddr_in client_addr;
	int client_len = sizeof(client_addr);
	int conn_fd = accept_or_die(listen_fd, (sockaddr_t *) &client_addr, (socklen_t *) &client_len);
	request_handle(conn_fd);
	//close_or_die(conn_fd);
    }
    return 0;
}
